generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  name       String
  email      String      @unique
  createdAt  DateTime    @default(now())
  googleId   String      @unique
  photo      String
  Comments   Comments[]
  followedBy Follows[]   @relation("follower")
  following  Follows[]   @relation("following")
  images     Images[]
  liked      Likes[]
  savedlist  Savedlist[]
  stories    Stories[]
  badges     Badges[]
}

model Cinema {
  id          String      @id @default(cuid())
  title       String
  description String
  genres      String
  type        String
  images      String
  ratings     BooScale[]  @relation("rateCinema")
  likedBy     Likes[]     @relation("likeCinema")
  savedBy     Savedlist[] @relation("saveCinema")
}

model Book {
  id             String      @id @default(cuid())
  authors        String[]
  book_id        String
  cover          String
  name           String
  pages          Int
  published_date String
  rating         Float
  synopsis       String
  url            String
  ratings        BooScale[]  @relation("rateBook")
  likedBy        Likes[]     @relation("likeBook")
  savedBy        Savedlist[] @relation("saveBook")
}

model Stories {
  id          String      @id @default(cuid())
  authorId    String
  title       String
  story       String      @unique
  images      String
  createdAt   DateTime    @default(now())
  description String?
  author      User        @relation(fields: [authorId], references: [id])
  ratings     BooScale[]  @relation("rateStory")
  likedBy     Likes[]     @relation("likeStory")
  savedBy     Savedlist[] @relation("saveStory")
}

model Images {
  id      String      @id @default(cuid())
  image   String      @unique
  userId  String
  caption String
  user    User        @relation(fields: [userId], references: [id])
  ratings BooScale[]  @relation("rateImage")
  likedBy Likes[]     @relation("likeImage")
  savedBy Savedlist[] @relation("saveImage")
}

model BooScale {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  cinemaId  String?
  bookId    String?
  storiesId String?
  imagesId  String?
  hauntsId  String?
  book      Book?    @relation("rateBook", fields: [bookId], references: [id])
  cinema    Cinema?  @relation("rateCinema", fields: [cinemaId], references: [id])
  haunts    Haunts?  @relation("rateHaunt", fields: [hauntsId], references: [id])
  images    Images?  @relation("rateImage", fields: [imagesId], references: [id])
  stories   Stories? @relation("rateStory", fields: [storiesId], references: [id])
}

model Haunts {
  id           String      @id @default(cuid())
  hauntId      String?
  name         String
  latitude     String
  longitude    String
  locationType String
  addressType  String
  address      String
  address2     String
  address3     String
  address4     String
  ratings      BooScale[]  @relation("rateHaunt")
  likedBy      Likes[]     @relation("likeHaunt")
  savedBy      Savedlist[] @relation("saveHaunt")
}

model Follows {
  id         String @id @default(cuid())
  userId     String
  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])
  user       User   @relation("following", fields: [userId], references: [id])
}

model Likes {
  id       String   @id @default(cuid())
  userId   String
  isLiked  Boolean
  hauntId  String?
  cinemaId String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("likeBook", fields: [bookId], references: [id])
  cinema   Cinema?  @relation("likeCinema", fields: [cinemaId], references: [id])
  haunt    Haunts?  @relation("likeHaunt", fields: [hauntId], references: [id])
  images   Images?  @relation("likeImage", fields: [imagesId], references: [id])
  story    Stories? @relation("likeStory", fields: [storyId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Savedlist {
  id       String   @id @default(cuid())
  userId   String
  cinemaId String?
  hauntId  String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("saveBook", fields: [bookId], references: [id])
  cinema   Cinema?  @relation("saveCinema", fields: [cinemaId], references: [id])
  haunt    Haunts?  @relation("saveHaunt", fields: [hauntId], references: [id])
  images   Images?  @relation("saveImage", fields: [imagesId], references: [id])
  story    Stories? @relation("saveStory", fields: [storyId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Badges {
  id          String   @id @default(cuid())
  name        String
  description String
  badge       String
  createdAt   DateTime @default(now())
  userId      String
  users       User[]
}

model Comments {
  id           String     @id @default(cuid())
  comment      String
  userId       String?
  topCommentId String?
  topComment   Comments?  @relation("CommentReplies", fields: [topCommentId], references: [id])
  User         User?      @relation(fields: [userId], references: [id])
  replies      Comments[] @relation("CommentReplies")
}
