generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Badges {
  id          String   @id @default(cuid())
  name        String
  description String
  badge       String
  createdAt   DateTime @default(now())
  userId      String
  User        User[]
}

model BooScale {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  cinemaId  String?
  bookId    String?
  storiesId String?
  imagesId  String?
  hauntsId  String?
  Book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  Cinema    Cinema?  @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  Haunts    Haunts?  @relation(fields: [hauntsId], references: [id], onDelete: Cascade)
  Images    Images?  @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  Stories   Stories? @relation(fields: [storiesId], references: [id], onDelete: Cascade)
}

model Book {
  id             String     @id @default(cuid())
  authors        String[]
  book_id        String
  cover          String
  name           String
  pages          Int
  published_date String
  rating         Float
  synopsis       String
  url            String
  BooScale       BooScale[]
  Comment        Comment[]
  Likes          Likes[]
  Saved          Saved[]
}

model Cinema {
  id          String     @id @default(cuid())
  title       String
  description String
  genres      String
  type        String
  images      String
  BooScale    BooScale[]
  Comment     Comment[]
  Likes       Likes[]
  Saved       Saved[]
}

model Comment {
  id            String    @id @default(cuid())
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  userId        String
  parentId      String?
  bookId        String
  cinemaId      String
  imagesId      String
  storiesId     String
  Book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  Cinema        Cinema    @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  Images        Images    @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  Comment       Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  Stories       Stories   @relation(fields: [storiesId], references: [id], onDelete: Cascade)
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  other_Comment Comment[] @relation("CommentToComment")
}

model Follows {
  id                            String @id @default(cuid())
  userId                        String
  followerId                    String
  User_Follows_followerIdToUser User   @relation("Follows_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  User_Follows_userIdToUser     User   @relation("Follows_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Haunts {
  id           String     @id @default(cuid())
  hauntId      String?
  name         String
  latitude     String
  longitude    String
  locationType String
  addressType  String
  address      String
  address2     String
  address3     String
  address4     String
  BooScale     BooScale[]
  Likes        Likes[]
  Saved        Saved[]
}

model Images {
  id       String     @id @default(cuid())
  image    String     @unique
  userId   String
  caption  String
  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  BooScale BooScale[]
  Comment  Comment[]
  Likes    Likes[]
  Saved    Saved[]
}

model Likes {
  id       String   @id @default(cuid())
  userId   String
  isLiked  Boolean  @default(false)
  hauntId  String?
  cinemaId String?
  bookId   String?
  storyId  String?
  imagesId String?
  Book     Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  Cinema   Cinema?  @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  Haunts   Haunts?  @relation(fields: [hauntId], references: [id], onDelete: Cascade)
  Images   Images?  @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  Stories  Stories? @relation(fields: [storyId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id])
}

model Saved {
  id       String   @id @default(cuid())
  userId   String
  isSaved  Boolean  @default(false)
  cinemaId String?
  hauntId  String?
  bookId   String?
  storyId  String?
  imagesId String?
  Book     Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  Cinema   Cinema?  @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  Haunts   Haunts?  @relation(fields: [hauntId], references: [id], onDelete: Cascade)
  Images   Images?  @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  Stories  Stories? @relation(fields: [storyId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id])
}

model Stories {
  id          String     @id @default(cuid())
  authorId    String
  title       String
  story       String     @unique
  images      String
  createdAt   DateTime   @default(now())
  description String?
  User        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  BooScale    BooScale[]
  Comment     Comment[]
  Likes       Likes[]
  Saved       Saved[]
}

model User {
  id                               String    @id @default(cuid())
  name                             String
  email                            String    @unique
  createdAt                        DateTime  @default(now())
  googleId                         String    @unique
  photo                            String
  Comment                          Comment[]
  Follows_Follows_followerIdToUser Follows[] @relation("Follows_followerIdToUser")
  Follows_Follows_userIdToUser     Follows[] @relation("Follows_userIdToUser")
  Images                           Images[]
  Likes                            Likes[]
  Saved                            Saved[]
  Stories                          Stories[]
  Badges                           Badges[]
}
