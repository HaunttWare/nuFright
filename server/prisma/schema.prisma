generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String         @id @default(cuid())
  name                             String
  email                            String         @unique
  createdAt                        DateTime       @default(now())
  googleId                         String         @unique
  photo                            String
  Comment                          Comment[]
  followedBy                       Follows[]      @relation("follower")
  following                        Follows[]      @relation("following")
  images                           Images[]
  liked                            Likes[]
  Message_Message_receiverIdToUser Message[]      @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]      @relation("Message_senderIdToUser")
  savedlist                        Saved[]
  stories                          Stories[]
  badges                           Badges[]
  Conversation                     Conversation[]
}

model Cinema {
  id          String     @id @default(cuid())
  title       String
  description String
  genres      String
  type        String
  images      String
  ratings     BooScale[] @relation("rateCinema")
  Comment     Comment[]
  likedBy     Likes[]    @relation("likeCinema")
  savedBy     Saved[]    @relation("saveCinema")
}

model Book {
  id             String     @id @default(cuid())
  authors        String[]
  book_id        String
  cover          String
  name           String
  pages          Int
  published_date String
  rating         Float
  synopsis       String
  url            String
  ratings        BooScale[] @relation("rateBook")
  Comment        Comment[]
  likedBy        Likes[]    @relation("likeBook")
  savedBy        Saved[]    @relation("saveBook")
}

model Stories {
  id          String     @id @default(cuid())
  authorId    String
  title       String
  story       String     @unique
  images      String
  createdAt   DateTime   @default(now())
  description String?
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ratings     BooScale[] @relation("rateStory")
  Comment     Comment[]
  likedBy     Likes[]    @relation("likeStory")
  savedBy     Saved[]    @relation("saveStory")
}

model Images {
  id      String     @id @default(cuid())
  image   String     @unique
  userId  String
  caption String
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings BooScale[] @relation("rateImage")
  Comment Comment[]
  likedBy Likes[]    @relation("likeImage")
  savedBy Saved[]    @relation("saveImage")
}

model BooScale {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  cinemaId  String?
  bookId    String?
  storiesId String?
  imagesId  String?
  hauntsId  String?
  book      Book?    @relation("rateBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema    Cinema?  @relation("rateCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunts    Haunts?  @relation("rateHaunt", fields: [hauntsId], references: [id], onDelete: Cascade)
  images    Images?  @relation("rateImage", fields: [imagesId], references: [id], onDelete: Cascade)
  stories   Stories? @relation("rateStory", fields: [storiesId], references: [id], onDelete: Cascade)
}

model Haunts {
  id           String     @id @default(cuid())
  hauntId      String?
  name         String
  latitude     String
  longitude    String
  locationType String
  addressType  String
  address      String
  address2     String
  address3     String
  address4     String
  ratings      BooScale[] @relation("rateHaunt")
  likedBy      Likes[]    @relation("likeHaunt")
  savedBy      Saved[]    @relation("saveHaunt")
}

model Follows {
  id         String @id @default(cuid())
  userId     String
  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  user       User   @relation("following", fields: [userId], references: [id], onDelete: Cascade)
}

model Likes {
  id       String   @id @default(cuid())
  userId   String
  isLiked  Boolean  @default(false)
  hauntId  String?
  cinemaId String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("likeBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema   Cinema?  @relation("likeCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunt    Haunts?  @relation("likeHaunt", fields: [hauntId], references: [id], onDelete: Cascade)
  images   Images?  @relation("likeImage", fields: [imagesId], references: [id], onDelete: Cascade)
  story    Stories? @relation("likeStory", fields: [storyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model Saved {
  id       String   @id @default(cuid())
  userId   String
  isSaved  Boolean  @default(false)
  cinemaId String?
  hauntId  String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("saveBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema   Cinema?  @relation("saveCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunt    Haunts?  @relation("saveHaunt", fields: [hauntId], references: [id], onDelete: Cascade)
  images   Images?  @relation("saveImage", fields: [imagesId], references: [id], onDelete: Cascade)
  story    Stories? @relation("saveStory", fields: [storyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model Badges {
  id          String   @id @default(cuid())
  name        String
  description String
  badge       String
  createdAt   DateTime @default(now())
  userId      String
  users       User[]
}

model Comment {
  id        String    @id @default(cuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  parentId  String?
  bookId    String
  cinemaId  String
  imagesId  String
  storiesId String
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  cinema    Cinema    @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  images    Images    @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  stories   Stories   @relation(fields: [storiesId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
}

model Conversation {
  createdAt DateTime  @default(now())
  id        String    @id
  Message   Message[]
  User      User[]
}

model Message {
  id                            String       @id
  conversationId                String
  senderId                      String
  createdAt                     DateTime     @default(now())
  message                       String
  receiverId                    String?
  Conversation                  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User_Message_receiverIdToUser User?        @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser   User         @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)
}
