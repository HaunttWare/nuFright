generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String     @id @default(cuid())
  name                         String
  email                        String     @unique
  createdAt                    DateTime   @default(now())
  googleId                     String     @unique
  photo                        String
  badges                       Badges[]
  ratings                      BooScale[]
  Chat_Chat_groupAdminIdToUser Chat?      @relation("Chat_groupAdminIdToUser")
  Comment                      Comment[]
  followedBy                   Follows[]  @relation("follower")
  following                    Follows[]  @relation("following")
  images                       Images[]
  liked                        Likes[]
  sentMessages                 Message[]  @relation("sender")
  playlist                     Playlist[]
  savedlist                    Saved[]
  songs                        Song[]
  stories                      Stories[]
  Chat_ChatToUser              Chat[]
  Message_readBy               Message[]  @relation("readBy")
}

model Cinema {
  id          String     @id @default(cuid())
  title       String
  description String
  genres      String
  type        String
  images      String
  ratings     BooScale[] @relation("rateCinema")
  Comment     Comment[]
  likedBy     Likes[]    @relation("likeCinema")
  savedBy     Saved[]    @relation("saveCinema")
}

model Book {
  id             String     @id @default(cuid())
  authors        String[]
  book_id        String
  cover          String
  name           String
  pages          Int
  published_date String
  rating         Float
  synopsis       String
  url            String
  ratings        BooScale[] @relation("rateBook")
  Comment        Comment[]
  likedBy        Likes[]    @relation("likeBook")
  savedBy        Saved[]    @relation("saveBook")
}

model Stories {
  id          String     @id @default(cuid())
  authorId    String
  title       String     @db.VarChar(300)
  story       String     @db.VarChar(10000)
  images      String
  createdAt   DateTime   @default(now())
  description String?
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ratings     BooScale[] @relation("rateStory")
  Comment     Comment[]
  likedBy     Likes[]    @relation("likeStory")
  savedBy     Saved[]    @relation("saveStory")
}

model Images {
  id      String     @id @default(cuid())
  image   String     @unique
  userId  String
  caption String
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings BooScale[] @relation("rateImage")
  Comment Comment[]
  likedBy Likes[]    @relation("likeImage")
  savedBy Saved[]    @relation("saveImage")
}

model BooScale {
  id        String   @id
  userId    String
  rating    Int
  cinemaId  String?
  bookId    String?
  storiesId String?
  imagesId  String?
  hauntsId  String?
  book      Book?    @relation("rateBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema    Cinema?  @relation("rateCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunts    Haunts?  @relation("rateHaunt", fields: [hauntsId], references: [id], onDelete: Cascade)
  images    Images?  @relation("rateImage", fields: [imagesId], references: [id], onDelete: Cascade)
  stories   Stories? @relation("rateStory", fields: [storiesId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Haunts {
  id           String     @id @default(cuid())
  hauntId      String?
  name         String
  latitude     String
  longitude    String
  locationType String
  addressType  String
  address      String
  address2     String
  address3     String
  address4     String
  ratings      BooScale[] @relation("rateHaunt")
  likedBy      Likes[]    @relation("likeHaunt")
  savedBy      Saved[]    @relation("saveHaunt")
}

model Follows {
  id         String @id @default(cuid())
  userId     String
  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  user       User   @relation("following", fields: [userId], references: [id], onDelete: Cascade)
}

model Likes {
  id       String   @id @default(cuid())
  userId   String
  isLiked  Boolean  @default(false)
  hauntId  String?
  cinemaId String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("likeBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema   Cinema?  @relation("likeCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunt    Haunts?  @relation("likeHaunt", fields: [hauntId], references: [id], onDelete: Cascade)
  images   Images?  @relation("likeImage", fields: [imagesId], references: [id], onDelete: Cascade)
  story    Stories? @relation("likeStory", fields: [storyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model Saved {
  id       String   @id @default(cuid())
  userId   String
  isSaved  Boolean  @default(false)
  cinemaId String?
  hauntId  String?
  bookId   String?
  storyId  String?
  imagesId String?
  book     Book?    @relation("saveBook", fields: [bookId], references: [id], onDelete: Cascade)
  cinema   Cinema?  @relation("saveCinema", fields: [cinemaId], references: [id], onDelete: Cascade)
  haunt    Haunts?  @relation("saveHaunt", fields: [hauntId], references: [id], onDelete: Cascade)
  images   Images?  @relation("saveImage", fields: [imagesId], references: [id], onDelete: Cascade)
  story    Stories? @relation("saveStory", fields: [storyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model Badges {
  id          String   @id
  name        String
  description String
  badge       String
  createdAt   DateTime @default(now())
  userId      String
  users       User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  parentId  String?
  bookId    String?
  cinemaId  String?
  imagesId  String?
  storiesId String?
  category  String?
  book      Book?     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  cinema    Cinema?   @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  images    Images?   @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  stories   Stories?  @relation(fields: [storiesId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  senderId    String
  createdAt   DateTime @default(now())
  content     String
  Chat        Chat     @relation(fields: [chatId], references: [id])
  sender      User     @relation("sender", fields: [senderId], references: [id])
  User_readBy User[]   @relation("readBy")
}

model Playlist {
  id          String  @id @default(cuid())
  videoId     String
  title       String
  thumbnail   String
  description String
  url         String?
  userId      String
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Song {
  id       String @id @default(cuid())
  fileName String
  userId   String
  fileURL  String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id                           String    @id @default(cuid())
  chatName                     String
  isGroupChat                  Boolean   @default(false)
  groupAdminId                 String?   @unique
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime
  User_Chat_groupAdminIdToUser User?     @relation("Chat_groupAdminIdToUser", fields: [groupAdminId], references: [id])
  Message                      Message[]
  User_ChatToUser              User[]
}
