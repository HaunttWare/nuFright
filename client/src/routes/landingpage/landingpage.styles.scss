// @import '~bootstrap/scss/bootstrap';

@import
url('https://fonts.googleapis.com/css?family=Montserrat:100');

.landingpage {
  font-family: 'Montserrat', sans-serif;
  background: rgb(10, 10, 10);
  height: 100vh;
  width: 100%;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: linear-gradient(rgba(10, 10, 10, .6), rgba(0, 0, 0, .9)),
  repeating-linear-gradient(0, transparent, transparent 2px, black 3px, black 3px),

  url('https://wallpaperfx.com/view_image/a-haunted-house-movie-1920x1080-wallpaper-16780.jpg');
  background-size: cover;
  background-position: center;
  z-index: 1;
}



#wrapper {
  text-align: center;
}

.sub {
  color: red;
  letter-spacing: 1em;
  font-size: 30px;
}


/* 
  mixin: basically a way to make a function in css to use again later on
  keeps code DRY
*/
@mixin glitchCopy {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
  position: relative;
  color: white;
  font-size: 4em;
  letter-spacing: .5em;
  animation: glitch-skew 1s infinite linear alternate-reverse;

  // create copy before text
  &::before {
    
    @include glitchCopy;  // include: uses the glitchCopy mixin here
    left: 2px; // moves text a little to the left
    text-shadow: -2px 0 #ff00c1;
    clip: rect(44px, 450px, 56px, 0); // clips the text at the top right, bottom left position
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }

  // create copy after text
  &::after {
    @include glitchCopy; // uses glitchCopy mixin again
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*calc(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew(calc(random(100)/ 100) + deg);
    }
  }
}

@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*calc(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew(calc(random(100)/100) + deg);
    }
  }
}

@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*calc(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}

$total-arrows: 3;
$arrow-line-length: 50px;
$arrow-line-width: 4px;

@mixin arrow-transitions($rot: 0deg) {
  transform: translate(-50%, -50%)
rotateZ($rot);
}

.arrow-container {
  display: block;
  width: 100px;
  height: 100px;
  position: absolute;
  top: 70%;
  left: 50%;
  @include arrow-transitions(0deg);
  &:hover {
    cursor: pointer;
    .arrow {
      top: 50%;
      &:before {
        @include arrow-transitions(-30deg);
      }
      &:after {
        @include arrow-transitions(30deg);
      }
    }
  }
}

.arrow {
  position: absolute;
  left: 50%;
  transition: all .4s ease;
  &:before,
  &:after {
    transition: all .4s ease;
    content: '';
    display: block;
    position: absolute;
    transform-origin: bottom right;
    background: #fff;
    width: $arrow-line-width;
    height: $arrow-line-length;
    border-radius: 10px;
    transform: translate(-50%, -50%)
    rotateZ(-45deg);
    background: red;
  }
  &:after {
    transform-origin: bottom left;
    transform: translate(-50%, -50%)
    rotateZ(45deg);
  }
  @for $i from 1 through $total-arrows {
    &:nth-child(#{$i}) {
      opacity: 0.3 * $i;
      top: 15 + Calc(100% * $i/5);
    }
  }
}

$mobile: 576px;
$tablet: 768px;
$laptop: 992px;
$desktop: 1200px;

@media only screen and (max-width: $mobile){
  .glitch {
    font-size: 2rem;
  }
  .sub {
    font-size: 20px;
  }
}


